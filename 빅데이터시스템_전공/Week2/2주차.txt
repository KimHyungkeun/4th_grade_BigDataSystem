Numpy

Numpy는 Python extension으로 산술 연산 및 matrix 연산에 아주 유용함

*List의 문제점 : 수학적 연산의 부족, speed가 늦음
Solution : Numpy
1) Numeric Python 
2) Alternative to Python List : NumPy Array 
3) Calculations over entire arrays (전체 array에 대한 계산도 가능)
4) Easy and fast (빠르고 쉬움)

height = [170,180,170]
weight = [60, 70, 65]
weight/height

import numpy as np
np_height = np.array(height)
np_weight = np.array(weight)
np_weight / np_height

* ndarray = N-dimensianal array
print(type(np_weight)) # <class 'numpy.ndarray'>

* Numpy arrat creation
np.array([1,3,4,5]) # array([1,3,4,5])

data = [ [1,2] , [11.22], [111,222]]
a = np.array(data)
print(a)
print(type(a))
[ [1 2]
  [11 22]
  [111 222]
]
<class 'numpy.ndarray'>

np.arange(10)
# array([0,1,2,3,4,5,6,7,8,9])
np.linspace(0,1,5) # 0에서 1까지 5등분 한다
array(0, 0.25, 0.5, 0.75, 1.0)

* Numpy arrats contain only one type
a = np.array([1.0, "is", True])
print(a) #@ ['1.0' 'is' 'True']

* Different use of + in Python and Numpy
python_list = [1,2,3]
np_list = np.array([1,2,3])
print(python_list + python_list)
print(np_list + np_list)
# [1,2,3,1,2,3]
# [2,4,6]

* NumPy Subsetting
bmi = np.array([10,30,50,70])
print(bmi[2])
print(bmi > 35)
print(bmi[bmi>35])
# 50
# [False False True True] 35보다 큰지 안큰지 T/F
# [50 70] 35보다 큰 수들만

an_array = np.array([ [1,2,3,4,5], [11,12,13,14,15]])
print(an_array)
print(an_array[0])
print(an_array[0][2])
print(an_array[0,2])
print(an_array[:, 1:3])
[ [1 2 3 4 5]
  [11 12 13 14 15] ]
[1 2 3 4 5]
3
3
[ [2 3]
  [12 13] ]  

* Numpy Utilities
1) create a 2 X 2 array of zeros
2) create a 2 X 2 array filled with 9.0
3) create a 2 X 2 matrix with the diagonal 1s and the others 0
4) create array of ones
5) create an array of random floats between 0 and 1

print (np.zeros((2,2))) # 2x2 0으로 이뤄진 행렬
print(np.full((2,2), 9.0)) # 2x2 9.0으로 이뤄진 행렬
print(np.eye(2,2)) # 2x2 대각선이 1로 이뤄진 행렬
print(np.ones((2,2)) # 2x2 1로 이뤄진 행렬
print(np.random.random((2,2))) # 2x2 random한 숫자로 이뤄진 행렬

* Numpy Slicing
an_array =
[ [11 12 13 14]
  [21 22 23 24]
  [31 32 33 34] ]

a_slice = an_array[:2, 1:3]
print(a_slice)
[ [12 13]
  [22 23] 

* Numpy slice modification
slice에대해 변경하고 싶을 시
an_array[0,1] # 12
a_slice [0,0] = 1000
an_array[0,1] # 1000
print(a_slice)
[ [1000 13]
  [22 23] ]

* Numpy slice indexing (1)
arr[0:2, :] # 0행에서 1행까지의 모든 value들
arr[2, 1:] # 2행에서 index 1부터의 모든 value들

arr[:2, 2:3] #0행에서 1행까지 중 index 2번째의 value

* Numpy slice indexing (2)
arr[:,::2] # 각 모든행에 대해서, index 2씩 건너뛴 value들
arr[::2, ::3] # index 2씩 건너뛴 행에 대해서, index 3씩 건너뛴 value들

* Indexing example
a = np.arrange(15)
b = a.reshape(3,5) # 3행 5열의 matrix로 모양변형
print(b) 
print(b[:2, 2:3])
print(a[0:5:2])
print(print(a[::2])
# [ [0 1 2 3 4]
     [5 6 7 8 9] 
     [10 11 12 13 14] ]
# [ [2]
     [7] ]
# [0 2 4]
# [0 2 4 6 8 10 12 14]

* Shape (1)
Shape(9,) # 0,1,2,3,4,5,6,7,8 Vector
Shape(3,5) # 3행 5열 Matrix

Shape (3,5,4) # 3행 5열 4개 Tensor (X)
=> Shape (3,5,4) # 3개의 5행 4열 Matrix

* Slicing example (slice된것이 matrix인가 vector인가)
an_array = np.array ( [ [11,12,13,14], [21,22,23,24], [31,32,33,34] ] )
print(an_array)
row_rank1 = an_array[1,:]
print(row_rank1, row_rank1.shape) # [ ]는 vector 모양
[ [11 12 13 14]
  [21 22 23 24]
  [31 32 33 34] ]
[21 22 23 24] (4,) 

row_rank2 = an_array[1:2, :]
print(row_rank2, row_rank2.shape) # [ [] ]는 matrix 모양
[ [21 22 23 24] ] (1, 4)

* More array indexing
[ [11 12 13 14] 
  [21 22 23 24] 
  [31 32 33 34]
  41 42 43 44] ]
(4, 4) 
 

row_indices = np.arrange(4)
col_indices = np.array([0,1,2,0])
print(row_indices)
print(col_indices)
print(zip(row_indices, col_indices))
# [0 1 2 3]
# [0 1 2 0]
<zip object at ~~~> # zip 객체 생성

for row, col in zip(row_indices, col_indices) :
  print(row, " ", col)
0 0
1 1
2 2 
3 0

print("Values : \n", an_array[row_indices, col_indices])
# [11, 22 ,33, 41]

* Boolean indexing (1)
an_array =
[ [11,12] 
  [21, 22]
  [31, 32] ]
filter = (an_array > 15)
print(an_array)
print(filter)
# [ [11,12] 
  [21, 22]
  [31, 32] ]
# [ [False,False] 
  [True, True]
  [True, True] ] 

print(an_array[filter])
[21 22 31 32] # vector
an_array[an_array > 15]
array([21,22,31,32])

* Boolean indexing (2)
an_array[(an_array > 20) & (an_array < 30)]
array([21,22])

print(an_array[an_array % 2 == 0])
an_array[an_array % 2 == 0] += 100
print(an_array)
#[12 22 32]
#[ [11 112]
  [21 122]
  [31 132] ]

a =np.arange(15).reshape((3,5))
print(a)
b = (a % 3 == 0)
print(b)
a[b]

# [ [0 1 2 3 4]
     [5 6 7 8 9]
     [10 11 12 13 14] ]
# [ [True False False True False]
     [False True False False True]
     [False False True False False]]
array([0, 3, 6, 9 ,12])

* Datatypes
ex1 = np.array([11,12])
print(ex1. dtype) # int32
ex2 = np.array([11.0,12.0])
print(ex2. dtype) # float64
ex3 = np.array([11,12], dtype=np.int64))

* Arithmetic array operation
int와 float64가 연산하면 => float64형태로

* Reshaping
"-1"을 활용하면 numpy가 shape을 알아서 결정
b= np.arrange(12).reshpae(2,6)
print(b)
[ [0 1 2 3 4 5]
  [6 7 8 9 10 11] ]
d = b.reshape(3,-1)
print(d)
[ [0 1 2 3]
  [4 5 6 7]
  8 9 10 11] ]

* Random number generation
arr = np.random.randn(2,5) # 평균 0, 표준편차 1인 임의의 random 2 x 5 matrix
arr = np.random.rand(2,5) # 0과 1사이의 2 x 5 matrix
arr = np.random.normal(50, .1, 5) # 평균 50, 표준편차 0.1, 갯수 5개 vector

* Numpy axis
a =
[ [0 1 2 3 4]
  [5 6 7 8 9]
  [10 11 12 13 14] ]
a.num = 105 # 모든 value들 다 연산 

a.num(axix=0)
# array ( [15, 18, 21, 24, 27]) # column단위로 연산이 이뤄짐

a.num(axix=1)
# array ( [10, 35, 60]) # row 단위로 연산이 이뤄짐

* Sorting and set operations
unsorted = np.random.randn(10)
print(unsorted)

sorted = np.array(unsorted) #element들을 정렬한다
sorted.sort()
print(sorted)

array = np.array([1,2,3,1,2,3])
np.unique(array)
# array([1,2,3])

# 집합 연산
s1 = np.array(["desk", "chair", "bulb"])
s2 = np.array(["lamp", "bulb", "chair"])
print(np.intersect1d(s1,s2))
print(np.union1d(s1,s2))
print(np.setdiff1d(s1,s2))
print(np.in1d(s1,s2)) #s1의 원소가 s2 집합에도 있는지 T/F 여부
# ['bulb', 'chair']
# ['bulb', 'chair', 'desk', 'lamp']
# ['desk']
# [False True True]

# Broadcasting
(Matrix A)
1 2 3 4
5 6 7 8
9 10 11 12
+
(Matrix B)
0 1 0 2

Matrix A + B
1 2 3 4 | 0 1 0 2
5 6 7 8 | 0 1 0 2
9 10 11 12 | 0 1 0 2
=
1 3 3 6
5 7 7 10
9 11 11 14

*narray vs list : narray가 더 빠르다


